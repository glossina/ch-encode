/*
 This file was autogenerated via
 ------------------------------------------
 ldetool generate --go-string extractor.lde
 ------------------------------------------
 do not touch it with bare hands!
*/

package util

import (
	"fmt"
	"strconv"
	"strings"
)

var commaSpace = ", "
var decimalLbrack = "Decimal("

// Extractor ...
type Extractor struct {
	Rest      string
	Precision int
	Scale     int
}

// Extract ...
func (p *Extractor) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpInt int64

	// Checks if the rest starts with `"Decimal("` and pass it
	if strings.HasPrefix(p.Rest, decimalLbrack) {
		p.Rest = p.Rest[len(decimalLbrack):]
	} else {
		return false, nil
	}

	// Take until ", " as Precision(int)
	pos = strings.Index(p.Rest, commaSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(commaSpace):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("Cannot parse `%s`: %s", string(tmp), err)
	}
	p.Precision = int(tmpInt)

	// Take until ')' as Scale(int)
	pos = strings.IndexByte(p.Rest, ')')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("Cannot parse `%s`: %s", string(tmp), err)
	}
	p.Scale = int(tmpInt)

	return true, nil
}
